package edu.kh.variable.ex1;

public class VariableExample2 {

	public static void main(String[] args) {
		
		/*
		  자바 기본 자료형
		  
		 1. 논리형 - boolean (1byte)
		 2. 정수형 - byte(1byte), short(2byte), int(4byte), long(8byte)
		 3. 실수형 - float(4byte), double(8byte)
		 4. 문자형 - char(2byte, 유니코드)
		
		 */
		
		// 변수 선언 : 메모리에 값을 저장할 공간을 할당하는 것.
		// 변수 값 대입(집어 넣기, 초기화) : 변수에 값을 집어 넣는 것.
		
		// Camel 표기법 - 연결되는 두 단어 중 후속 단어의 첫 문자를 대문자로
		
		boolean booleanData;
		// 1. 메모리에 논리값(t/f)을 저장할 공간 1byte를 할당하고,
		// 2. 할당된 공간을 booleanData라고 부르겠다.
		
		booleanData = true;
		//  booleanData 변수에 true 값을 대입
		
		System.out.println("booleanData : " + booleanData);
		System.out.println("-----------------------------");
		
		byte byteNumber = 127; 
		// 메모리에 정수 값을 저장할 공간을 1byte 할당하고
		// 할당된 공간을 byteNumber라고 부르겠다.
		// 선언된 byteNumber 변수에 127을 처음으로 집어넣음(초기화)
		
		System.out.println("byteNumer : " + byteNumber);
		System.out.println("---------------------------");
		
		short shortNumber = 32767; // 변수 선언 + 초기화 동시
		int intNumber = 2147483647; // 변수 선언 + 초기화 동시(short, byte는 옛날 코드의 잔재)
		
		System.out.println("shortNumber : " + shortNumber);
		System.out.println("---------------------------");
		
		System.out.println("intNumber : " + intNumber);
		System.out.println("---------------------------");
		
		/* 기본 형태 
		- 자료형 + 변수 = 리터럴(변수에 대입되거나 작성되어지는 값 자체) 
		
		- 리터럴은 자료형에 따라 표기법이 다름		
		 */
		
		long longNumber = 10000000000l;
		/* The literal 10000000000 of type int is out of range 
		 -> 100억의 값은 int의 범위를 벗어남 -> 뒤에 L or l를 붙여 long 자료형임을 나타냄		 
		*/
		System.out.println("longNumber : " + longNumber);
		System.out.println("---------------------------");
		
		
		float floatNumber = 1.2345f;
		// long이랑 마찬가지. F or f 붙여 float 자료형임을 나타냄
		System.out.println("floatNumber : " + floatNumber);
		System.out.println("---------------------------");
		
		double doubleNumber =3.141592;
		// double이 실수형 중 기본형
		// 리터럴 표기법이 없는 실수는 double로 인식
		// 뒤에 d를 작성할 순 있음
		System.out.println("doubleNumber : " + doubleNumber);
		System.out.println("---------------------------");
		
		
	}
	
}
